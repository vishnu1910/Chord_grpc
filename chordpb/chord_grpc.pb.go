// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: chord.proto

package chordpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChordService_Insert_FullMethodName          = "/chord.ChordService/Insert"
	ChordService_Delete_FullMethodName          = "/chord.ChordService/Delete"
	ChordService_Search_FullMethodName          = "/chord.ChordService/Search"
	ChordService_Join_FullMethodName            = "/chord.ChordService/Join"
	ChordService_FindSuccessor_FullMethodName   = "/chord.ChordService/FindSuccessor"
	ChordService_FindPredecessor_FullMethodName = "/chord.ChordService/FindPredecessor"
	ChordService_GetSuccessor_FullMethodName    = "/chord.ChordService/GetSuccessor"
	ChordService_GetPredecessor_FullMethodName  = "/chord.ChordService/GetPredecessor"
	ChordService_GetID_FullMethodName           = "/chord.ChordService/GetID"
	ChordService_Notify_FullMethodName          = "/chord.ChordService/Notify"
	ChordService_SendKeys_FullMethodName        = "/chord.ChordService/SendKeys"
)

// ChordServiceClient is the client API for ChordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChordService defines all remote methods needed for DHT operations.
type ChordServiceClient interface {
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	FindSuccessor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*NodeInfo, error)
	FindPredecessor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*NodeInfo, error)
	GetSuccessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	GetPredecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeInfo, error)
	GetID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IDResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
	SendKeys(ctx context.Context, in *SendKeysRequest, opts ...grpc.CallOption) (*SendKeysResponse, error)
}

type chordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChordServiceClient(cc grpc.ClientConnInterface) ChordServiceClient {
	return &chordServiceClient{cc}
}

func (c *chordServiceClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, ChordService_Insert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, ChordService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, ChordService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ChordService_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) FindSuccessor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, ChordService_FindSuccessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) FindPredecessor(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, ChordService_FindPredecessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) GetSuccessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, ChordService_GetSuccessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) GetPredecessor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, ChordService_GetPredecessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) GetID(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IDResponse)
	err := c.cc.Invoke(ctx, ChordService_GetID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, ChordService_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordServiceClient) SendKeys(ctx context.Context, in *SendKeysRequest, opts ...grpc.CallOption) (*SendKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendKeysResponse)
	err := c.cc.Invoke(ctx, ChordService_SendKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordServiceServer is the server API for ChordService service.
// All implementations must embed UnimplementedChordServiceServer
// for forward compatibility.
//
// ChordService defines all remote methods needed for DHT operations.
type ChordServiceServer interface {
	Insert(context.Context, *InsertRequest) (*InsertResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	FindSuccessor(context.Context, *IDRequest) (*NodeInfo, error)
	FindPredecessor(context.Context, *IDRequest) (*NodeInfo, error)
	GetSuccessor(context.Context, *Empty) (*NodeInfo, error)
	GetPredecessor(context.Context, *Empty) (*NodeInfo, error)
	GetID(context.Context, *Empty) (*IDResponse, error)
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
	SendKeys(context.Context, *SendKeysRequest) (*SendKeysResponse, error)
	mustEmbedUnimplementedChordServiceServer()
}

// UnimplementedChordServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChordServiceServer struct{}

func (UnimplementedChordServiceServer) Insert(context.Context, *InsertRequest) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedChordServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChordServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedChordServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChordServiceServer) FindSuccessor(context.Context, *IDRequest) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedChordServiceServer) FindPredecessor(context.Context, *IDRequest) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPredecessor not implemented")
}
func (UnimplementedChordServiceServer) GetSuccessor(context.Context, *Empty) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuccessor not implemented")
}
func (UnimplementedChordServiceServer) GetPredecessor(context.Context, *Empty) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (UnimplementedChordServiceServer) GetID(context.Context, *Empty) (*IDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetID not implemented")
}
func (UnimplementedChordServiceServer) Notify(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedChordServiceServer) SendKeys(context.Context, *SendKeysRequest) (*SendKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKeys not implemented")
}
func (UnimplementedChordServiceServer) mustEmbedUnimplementedChordServiceServer() {}
func (UnimplementedChordServiceServer) testEmbeddedByValue()                      {}

// UnsafeChordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordServiceServer will
// result in compilation errors.
type UnsafeChordServiceServer interface {
	mustEmbedUnimplementedChordServiceServer()
}

func RegisterChordServiceServer(s grpc.ServiceRegistrar, srv ChordServiceServer) {
	// If the following call pancis, it indicates UnimplementedChordServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChordService_ServiceDesc, srv)
}

func _ChordService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_FindSuccessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).FindSuccessor(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_FindPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).FindPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_FindPredecessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).FindPredecessor(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_GetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).GetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_GetSuccessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).GetSuccessor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_GetPredecessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).GetPredecessor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_GetID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).GetID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_GetID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).GetID(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordService_SendKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServiceServer).SendKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordService_SendKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServiceServer).SendKeys(ctx, req.(*SendKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChordService_ServiceDesc is the grpc.ServiceDesc for ChordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chord.ChordService",
	HandlerType: (*ChordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _ChordService_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ChordService_Delete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _ChordService_Search_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ChordService_Join_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _ChordService_FindSuccessor_Handler,
		},
		{
			MethodName: "FindPredecessor",
			Handler:    _ChordService_FindPredecessor_Handler,
		},
		{
			MethodName: "GetSuccessor",
			Handler:    _ChordService_GetSuccessor_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _ChordService_GetPredecessor_Handler,
		},
		{
			MethodName: "GetID",
			Handler:    _ChordService_GetID_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _ChordService_Notify_Handler,
		},
		{
			MethodName: "SendKeys",
			Handler:    _ChordService_SendKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chord.proto",
}
